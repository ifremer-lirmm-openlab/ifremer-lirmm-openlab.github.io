{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"We are a collaborative and multidisciplinary research team bringing together scientists from LIRMM-CNRS (Laboratory of Informatics, Robotics, and Microelectronics, Montpellier) and Ifremer (French Research Institute for the Exploitation of the Sea). We design and develop open-source hardware and software solutions for the observation and understanding of wildlife, ecosystems, and biodiversity. \ud83c\udf0a Visit our GitHub Organization for more content. \ud83d\udccb For the complete list of published repositories see page Official GitHub Repositories . \ud83d\ude80 To start contributing, first read the GitHub Organization Guidelines . \ud83e\uddea More about our work and people involved in page The Team and Research Activities . Contacts : Sylvain Bonhommeau (Researcher, Ifremer) : sylvain.bonhommeau@ifremer.fr Serge Bernard (Researcher, CNRS) : serge.bernard@lirmm.fr","title":"Home"},{"location":"general-guidelines/","text":"GitHub Organization Guidelines This documentation provides guidelines for contributing to this GitHub organization. It includes rules, conventions, and best practices to to help contributors work together effectively. Topics : Why hosting my project on this organization ? Naming conventions Collaborative workflows (branches, issues and pull-requests) Versioning the sources Documenting the projects Structure for the repositories (Bonus) Tips and useful ressources Why hosting my project on this organization ? If your project involves multiple contributors, potentially working in parallel. If it requires efficient change tracking with a detailed history. If versioning is essential for archiving or referencing in other works (e.g., papers, reports, or derivative projects). If it is designed to endure and evolve over time. This organization welcomes all types of development, including low-level software, 3D-printed models, electronic PCB designs, datasets, high-level applications, and more. \ud83d\udca1 This organization is intended for official public repositories. For temporary, sandbox, or experimental projects, it is recommended to use your personal GitHub account or the GitLab instances provided by IFREMER or LIRMM. Naming conventions General best practices for GitHub names Use descriptive names that clearly indicate the purpose or function of the project. Stick to lowercase and hyphens for readability and keep names short and concise. Avoid special characters, using only letters, numbers, and hyphens for compatibility. Finally, choose names that are future-proof and remain relevant as the project evolves. Ensure the name is unique and have fun choosing it ! Naming rules for specific project types We recommend the following naming conventions for the project types identified below. These are not strict rules but rather best practices to enhance readability. Legend : <...> = word to replace. * = optional fields. Embedded softwares For projects involving source code or firmware targeting specific electronic platforms. Recommend naming convention : <mainname>-<type>-<feature*>-<platform>-firmware Description : mainname : The primary name that relates to the application, project, institution, or a predefined special name. type : the device's type or function. feature : (optional) should relates to the main features, such as involved sensors, type of RF communication, algorithms, ... platform : the target platform name Examples : seaturtle-tag-depthlora-iotboard-firmware urelease-logger-depthgpslora-iotboard-firmware loraship-logger-gpslora-fncboard-firmware bia-sensor-embedfft-fncboard-firmware bananatwo-tracker-prestempargos-stm32l4-firmware echologgerS500-spicommunication-raspi-firmware edna-pumpcontroler-blueos-arduino-firmware ... Electronic boards and PCBs For projects involving PCB design and fabrication of electronic board. These serve to share the source including BOM, PCB layout, 2D/3D model, datasheet, ... Recommend naming convention : <mainname>-<feature*>-<version*>-cadfiles Description : mainname : The primary name that relates to the application, project, institution, or a predefined special name. feature : (optional) should relates to the main features, such as the embeded sensors, major or new functions, type, ... version : (optional) Use it to differentiate major changes in design, if all version will be maintained over time. Examples : iotboard-multisensorlora-cadfiles fncboard-multisensorlora-v1-cadfiles fncboard-multisensor-v2-cadfiles biaboard-externadc-cadfiles argoskineis-daugtherboard-v1-cadfiles cricketl0-assettrackerlora-cadfiles ... 3D-printed models Projects to share sources of 3D-printed design. Recommend naming convention : <mainname>-<type*>-<feature*>-<version*>-3dmodel Description : mainname : The primary name that relates to the application, project, institution, or a predefined special name. feature : (optional) should relates to the main features or specificity. version : (optional) Use it to differentiate major changes in design, if all version will be maintained over time. Examples : seaturtle-tag-externant-v1-3dmodel fish-tag-survivalrate-v1-3dmodel urelease-tag-magconnector-3dmodel dcp-logger-solarpowered-3dmodel plancha-antennasupport-circular-3dmodel ... Datasets, Data analysis and Data viewers Projects to share dataset, analysis scripts, data workflow, ... Oten demanded by scientific journals to support the publication. Recommend naming convention : <anyname>-dataset , <anyname>-dataprocessing , <anyname>-workflow , <anyname>-dashboard or <anyname>-dataviewer Names can have a <version> field at the end if need. Description : anyname : Any names that reflects the content. Names should be future-proof if cited in publication. Examples : seaturtle-tag-diving-indianocean-2022-dataset plancha-workflow-v1 loraship-expe-autoreport-dataprocessing urelease-taaf-dashboard ... Other projects Be inventive or descriptive and follow best practices! Examples : DinoVdeau dataflux-agent lora-sensors-in-marine-scenario-mkdocs loraship-toolbox ... Collaborative workflows (branches, issues and pull-requests) Collaborating on a project is easier with Git tools like branches, issues, and pull requests. These features help teams work on different tasks, track progress, and review changes before merging them into the main project. Branching is one of Git\u2019s most powerful features to help you avoid mixing up different lines of development. For most of our developments, we recommend following the standardized GitHub Flow (see image below). This approach involves maintaining a main branch stable while creating parallel branches for new features, bug fixes or paralell developpement. These branches are regularly merged back into main once the code is stable and reviewed (see next section Using Git issues and pull-request ) Figure. Illustration of the GitHub Flow. Image source . Git issues should be used to track tasks, bugs, and feature requests, providing clear descriptions and relevant labels to organize and prioritize work. Each issue should be concise but detailed enough to guide contributors. Pull requests (PRs) are essential for reviewing and merging code changes. A PR should reference the issue it addresses and include a clear summary of the changes made. It is best practice to keep PRs small and focused, making them easier to review and reducing the risk of introducing errors. Always request a review from team members before merging with the main branch and use comments to discuss changes or suggest improvements. \ud83d\udd0d Consult these pages on the GitHub docs for more details about the workflow, branches, issues and pull-requests : github-flow about-branches creating-and-deleting-branches-within-your-repository about-comparing-branches-in-pull-requests creating-an-issue about-pull-requests creating-a-pull-request Versioning the sources Git provides powerful features for tracking and managing source versions through objects called Tags and Releases . Releases are deployable software iterations you can package and make available for a wider audience to download and use. Releases are based on Tags , which mark a specific point in your repository's history. In our workflow, we will use Tags and Releases to flag important steps during the project lifetime. These include versions used for specific experiments, final designs intended for production or fabrication, and project states that need to be referenced in technical reports or scientific papers. Namming the versions follows a standardized procedure that is based on the Semantic Versioning 2.0.0 specification. Recommend naming convention : v<major>.<minor>.<patch>-<extraname*> Description : major : Major increments when new functionality is not backwards compatible minor : Minor increments every time backwards compatible functionality is added. patch : Patch increments every time you release a build with bug fixes or small changes. extraname : (Optional) this field can serve to add a more readable information to better identify the purpose of this release. Examples : v1.0.0 (start of the design. Version below that are test ones that wont be published) v1.0.5 (small changes or bug fixes) v1.1.0 (new feature added) v1.1.2-expemalte2022 (version used for experiment in Malte in 2022) v1.1.3-papernature2023 (version referenced in a publication in 2023) v2.0.0 (marks major changes were the design has changed a lots in term of functionnalities) ... \ud83d\udd0d Consult this link to learn how to create a Tags and Releases for a GitHub project : https://docs.github.com/en/repositories/releasing-projects-on-github/managing-releases-in-a-repository?tool=webui . \ud83d\udca1 A specific case where multiple versions of a design require separate repositories arises when these versions will be independant, both maintained and will evolve in parallel. In such situations, it is best to create a dedicated Git repository for each version, using names that relates to each others. Documenting the projects Each project must be described and documented. This can be done through README files, typically located at the root of Git projects, through Wiki pages for more advanced documentation (natively supported by Git tools), or through external documentation included in a docs folder at the root of the repository. The README file The README file is mandatory and serves as a comprehensive guide for your project. It explains the project's purpose, provides installation and configuration instructions, offers usage guidance, and details how others can contribute. \ud83d\udd0d Consult this link for best practice about README files : https://www.makeareadme.com/ A README must include the following sections: Description: Short description of the purpose of the project Installation instructions: Directions for installing the project on various platforms. Operating instructions: How to use the project effectively. File manifest: A list of files included in the project directory or archive. Available versions: A list of source releases and active branches. Changelog: A log of changes, aimed at developers. Known bugs: A list of existing issues or limitations. Troubleshooting instructions: Tips for resolving common problems. Contact information: Details for reaching the author or distributor. Credits and acknowledgments: Recognition of contributors and collaborators. Copyright and licensing information: Legal details about the project's usage rights. \ud83d\udd0d Nice examples of README files can be found here : https://www.readme-templates.com/ Long-form and detailled documentation Additionnal documentation will be included in a docs/ folder located at the root of the repository. The preferred format for these documents is Markdown, but other file types such as PDF or plain text are also acceptable if necessary. It is recommended to avoid using formats that require specialized software , such as .docx (Microsoft Word), .odt (OpenOffice), .xls (Microsoft Excel), or similar. The docs/ folder can contain sub-folder for clarity, such as : docs/reports/ : for general reports docs/technical/ : for technical documents docs/experimentation/ : for experimental results docs/datasheet/ : to include datasheets or specifications docs/test/ : for test reports When writing your documents in Markdown, you will need to include images (or other external files) alongside the main file. It is recommended to store these files in a folder named assets/ located at the same level as the main file (e.g. in folder docs/ or in one of its sub-folder). You can then reference the images within your text using a syntax like: ![](./assets/myimage.png) . \ud83d\udca1 By following these guidelines, your documentation will be viewable directly in the GitHub web interface and compatible with MkDocs by simply adding a mkdocs.yml file at the root of your repository. This setup enables easy conversion into a static website or export to PDF. For an example, visit https://github.com/kernythree/minimal-working-example-mkdocs . Wiki pages (only for public repository) Each GitHub repository includes a section for hosting documentation, known as the wiki. You can use your repository\u2019s wiki to share detailed content about your project, such as usage instructions, design details, or core principles. While a README file provides a quick overview of your project, a wiki allows you to include additional, more comprehensive documentation. \ud83d\udd0d Consult this link for more info on GitHub's Wikis : https://docs.github.com/fr/communities/documenting-your-project-with-wikis/adding-or-editing-wiki-pages Structure for the repositories Structure of repositories are flexible but again they should follow several best practices to ensure consistency and readibility. Organize the repository by placing essential files, such as README.md , LICENSE , and CONTRIBUTING.md , at the root for easy access. Create folders like src/ or code/ for source code, docs/ for documentation ... and group other related files into meaningful folders such as data/ , script/ , tools/ , python/ , docker/ , build/ , ... Avoid overly deep or complex hierarchies to keep navigation simple and intuitive. Environment-specific configurations, such as .env or settings.json , should be kept in a dedicated folder, such as config/ . Use .gitignore to prevent sensitive or unnecessary files, like logs or binaries, from being included in the repository. (Bonus) Tips and useful ressources Tips for git Cloning a git repository to your machine # Replace `owner/repo` with the owner and name of the repository to clone git clone https://github.com/owner/repo.git # change into the `repo` directory cd repo Checking and publishing changes on the main branch # check the sate of your local files against the distant repository git status # make changes to local files # for example, edit `file1.md` and `file2.md` using the text editor # stage the changed files git add file1.md file2.md # take a snapshot of the staging area (anything that's been added) git commit -m \"my commit message\" # push changes to github git push origin main Creating and modifying a new branch # create a new branch to store any new changes git branch my-branch # switch to that branch (line of development) git checkout my-branch # Creating and switching to a branch in one line git checkout -b my-branch # make changes, for example, edit `file1.md` and `file2.md` using the text editor # stage the changed files git add file1.md file2.md # take a snapshot of the staging area (anything that's been added) git commit -m \"my commit message\" # push changes to github git push --set-upstream origin my-branch External Docs and Useful Links Working with Git Basis for Git : https://docs.github.com/en/get-started/using-git https://git-scm.com/docs Git with Visual Studio Code : https://code.visualstudio.com/docs/sourcecontrol/intro-to-git Working with Markdown files Getting started : https://www.markdownguide.org/getting-started/ Basic syntax : https://www.markdownguide.org/basic-syntax/ Markdown in Python : https://www.honeybadger.io/blog/python-markdown/ https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.to_markdown.html Choosing an open source license List of commons open-source license : https://choosealicense.com/ https://choosealicense.com/appendix/ The MIT license : https://en.wikipedia.org/wiki/MIT_License The Creative Commons license : https://creativecommons.org/share-your-work/cclicenses/ Building your documentation Using Mkdocs tool : https://www.mkdocs.org/getting-started/ Using GitHub pages : https://docs.github.com/en/pages/getting-started-with-github-pages","title":"GitHub Organization Guidelines"},{"location":"general-guidelines/#github-organization-guidelines","text":"This documentation provides guidelines for contributing to this GitHub organization. It includes rules, conventions, and best practices to to help contributors work together effectively. Topics : Why hosting my project on this organization ? Naming conventions Collaborative workflows (branches, issues and pull-requests) Versioning the sources Documenting the projects Structure for the repositories (Bonus) Tips and useful ressources","title":"GitHub Organization Guidelines"},{"location":"general-guidelines/#why-hosting-my-project-on-this-organization","text":"If your project involves multiple contributors, potentially working in parallel. If it requires efficient change tracking with a detailed history. If versioning is essential for archiving or referencing in other works (e.g., papers, reports, or derivative projects). If it is designed to endure and evolve over time. This organization welcomes all types of development, including low-level software, 3D-printed models, electronic PCB designs, datasets, high-level applications, and more. \ud83d\udca1 This organization is intended for official public repositories. For temporary, sandbox, or experimental projects, it is recommended to use your personal GitHub account or the GitLab instances provided by IFREMER or LIRMM.","title":"Why hosting my project on this organization ?"},{"location":"general-guidelines/#naming-conventions","text":"","title":"Naming conventions"},{"location":"general-guidelines/#general-best-practices-for-github-names","text":"Use descriptive names that clearly indicate the purpose or function of the project. Stick to lowercase and hyphens for readability and keep names short and concise. Avoid special characters, using only letters, numbers, and hyphens for compatibility. Finally, choose names that are future-proof and remain relevant as the project evolves. Ensure the name is unique and have fun choosing it !","title":"General best practices for GitHub names"},{"location":"general-guidelines/#naming-rules-for-specific-project-types","text":"We recommend the following naming conventions for the project types identified below. These are not strict rules but rather best practices to enhance readability. Legend : <...> = word to replace. * = optional fields.","title":"Naming rules for specific project types"},{"location":"general-guidelines/#embedded-softwares","text":"For projects involving source code or firmware targeting specific electronic platforms. Recommend naming convention : <mainname>-<type>-<feature*>-<platform>-firmware Description : mainname : The primary name that relates to the application, project, institution, or a predefined special name. type : the device's type or function. feature : (optional) should relates to the main features, such as involved sensors, type of RF communication, algorithms, ... platform : the target platform name Examples : seaturtle-tag-depthlora-iotboard-firmware urelease-logger-depthgpslora-iotboard-firmware loraship-logger-gpslora-fncboard-firmware bia-sensor-embedfft-fncboard-firmware bananatwo-tracker-prestempargos-stm32l4-firmware echologgerS500-spicommunication-raspi-firmware edna-pumpcontroler-blueos-arduino-firmware ...","title":"Embedded softwares"},{"location":"general-guidelines/#electronic-boards-and-pcbs","text":"For projects involving PCB design and fabrication of electronic board. These serve to share the source including BOM, PCB layout, 2D/3D model, datasheet, ... Recommend naming convention : <mainname>-<feature*>-<version*>-cadfiles Description : mainname : The primary name that relates to the application, project, institution, or a predefined special name. feature : (optional) should relates to the main features, such as the embeded sensors, major or new functions, type, ... version : (optional) Use it to differentiate major changes in design, if all version will be maintained over time. Examples : iotboard-multisensorlora-cadfiles fncboard-multisensorlora-v1-cadfiles fncboard-multisensor-v2-cadfiles biaboard-externadc-cadfiles argoskineis-daugtherboard-v1-cadfiles cricketl0-assettrackerlora-cadfiles ...","title":"Electronic boards and PCBs"},{"location":"general-guidelines/#3d-printed-models","text":"Projects to share sources of 3D-printed design. Recommend naming convention : <mainname>-<type*>-<feature*>-<version*>-3dmodel Description : mainname : The primary name that relates to the application, project, institution, or a predefined special name. feature : (optional) should relates to the main features or specificity. version : (optional) Use it to differentiate major changes in design, if all version will be maintained over time. Examples : seaturtle-tag-externant-v1-3dmodel fish-tag-survivalrate-v1-3dmodel urelease-tag-magconnector-3dmodel dcp-logger-solarpowered-3dmodel plancha-antennasupport-circular-3dmodel ...","title":"3D-printed models"},{"location":"general-guidelines/#datasets-data-analysis-and-data-viewers","text":"Projects to share dataset, analysis scripts, data workflow, ... Oten demanded by scientific journals to support the publication. Recommend naming convention : <anyname>-dataset , <anyname>-dataprocessing , <anyname>-workflow , <anyname>-dashboard or <anyname>-dataviewer Names can have a <version> field at the end if need. Description : anyname : Any names that reflects the content. Names should be future-proof if cited in publication. Examples : seaturtle-tag-diving-indianocean-2022-dataset plancha-workflow-v1 loraship-expe-autoreport-dataprocessing urelease-taaf-dashboard ...","title":"Datasets, Data analysis and Data viewers"},{"location":"general-guidelines/#other-projects","text":"Be inventive or descriptive and follow best practices! Examples : DinoVdeau dataflux-agent lora-sensors-in-marine-scenario-mkdocs loraship-toolbox ...","title":"Other projects"},{"location":"general-guidelines/#collaborative-workflows-branches-issues-and-pull-requests","text":"Collaborating on a project is easier with Git tools like branches, issues, and pull requests. These features help teams work on different tasks, track progress, and review changes before merging them into the main project. Branching is one of Git\u2019s most powerful features to help you avoid mixing up different lines of development. For most of our developments, we recommend following the standardized GitHub Flow (see image below). This approach involves maintaining a main branch stable while creating parallel branches for new features, bug fixes or paralell developpement. These branches are regularly merged back into main once the code is stable and reviewed (see next section Using Git issues and pull-request ) Figure. Illustration of the GitHub Flow. Image source . Git issues should be used to track tasks, bugs, and feature requests, providing clear descriptions and relevant labels to organize and prioritize work. Each issue should be concise but detailed enough to guide contributors. Pull requests (PRs) are essential for reviewing and merging code changes. A PR should reference the issue it addresses and include a clear summary of the changes made. It is best practice to keep PRs small and focused, making them easier to review and reducing the risk of introducing errors. Always request a review from team members before merging with the main branch and use comments to discuss changes or suggest improvements. \ud83d\udd0d Consult these pages on the GitHub docs for more details about the workflow, branches, issues and pull-requests : github-flow about-branches creating-and-deleting-branches-within-your-repository about-comparing-branches-in-pull-requests creating-an-issue about-pull-requests creating-a-pull-request","title":"Collaborative workflows (branches, issues and pull-requests)"},{"location":"general-guidelines/#versioning-the-sources","text":"Git provides powerful features for tracking and managing source versions through objects called Tags and Releases . Releases are deployable software iterations you can package and make available for a wider audience to download and use. Releases are based on Tags , which mark a specific point in your repository's history. In our workflow, we will use Tags and Releases to flag important steps during the project lifetime. These include versions used for specific experiments, final designs intended for production or fabrication, and project states that need to be referenced in technical reports or scientific papers. Namming the versions follows a standardized procedure that is based on the Semantic Versioning 2.0.0 specification. Recommend naming convention : v<major>.<minor>.<patch>-<extraname*> Description : major : Major increments when new functionality is not backwards compatible minor : Minor increments every time backwards compatible functionality is added. patch : Patch increments every time you release a build with bug fixes or small changes. extraname : (Optional) this field can serve to add a more readable information to better identify the purpose of this release. Examples : v1.0.0 (start of the design. Version below that are test ones that wont be published) v1.0.5 (small changes or bug fixes) v1.1.0 (new feature added) v1.1.2-expemalte2022 (version used for experiment in Malte in 2022) v1.1.3-papernature2023 (version referenced in a publication in 2023) v2.0.0 (marks major changes were the design has changed a lots in term of functionnalities) ... \ud83d\udd0d Consult this link to learn how to create a Tags and Releases for a GitHub project : https://docs.github.com/en/repositories/releasing-projects-on-github/managing-releases-in-a-repository?tool=webui . \ud83d\udca1 A specific case where multiple versions of a design require separate repositories arises when these versions will be independant, both maintained and will evolve in parallel. In such situations, it is best to create a dedicated Git repository for each version, using names that relates to each others.","title":"Versioning the sources"},{"location":"general-guidelines/#documenting-the-projects","text":"Each project must be described and documented. This can be done through README files, typically located at the root of Git projects, through Wiki pages for more advanced documentation (natively supported by Git tools), or through external documentation included in a docs folder at the root of the repository.","title":"Documenting the projects"},{"location":"general-guidelines/#the-readme-file","text":"The README file is mandatory and serves as a comprehensive guide for your project. It explains the project's purpose, provides installation and configuration instructions, offers usage guidance, and details how others can contribute. \ud83d\udd0d Consult this link for best practice about README files : https://www.makeareadme.com/ A README must include the following sections: Description: Short description of the purpose of the project Installation instructions: Directions for installing the project on various platforms. Operating instructions: How to use the project effectively. File manifest: A list of files included in the project directory or archive. Available versions: A list of source releases and active branches. Changelog: A log of changes, aimed at developers. Known bugs: A list of existing issues or limitations. Troubleshooting instructions: Tips for resolving common problems. Contact information: Details for reaching the author or distributor. Credits and acknowledgments: Recognition of contributors and collaborators. Copyright and licensing information: Legal details about the project's usage rights. \ud83d\udd0d Nice examples of README files can be found here : https://www.readme-templates.com/","title":"The README file"},{"location":"general-guidelines/#long-form-and-detailled-documentation","text":"Additionnal documentation will be included in a docs/ folder located at the root of the repository. The preferred format for these documents is Markdown, but other file types such as PDF or plain text are also acceptable if necessary. It is recommended to avoid using formats that require specialized software , such as .docx (Microsoft Word), .odt (OpenOffice), .xls (Microsoft Excel), or similar. The docs/ folder can contain sub-folder for clarity, such as : docs/reports/ : for general reports docs/technical/ : for technical documents docs/experimentation/ : for experimental results docs/datasheet/ : to include datasheets or specifications docs/test/ : for test reports When writing your documents in Markdown, you will need to include images (or other external files) alongside the main file. It is recommended to store these files in a folder named assets/ located at the same level as the main file (e.g. in folder docs/ or in one of its sub-folder). You can then reference the images within your text using a syntax like: ![](./assets/myimage.png) . \ud83d\udca1 By following these guidelines, your documentation will be viewable directly in the GitHub web interface and compatible with MkDocs by simply adding a mkdocs.yml file at the root of your repository. This setup enables easy conversion into a static website or export to PDF. For an example, visit https://github.com/kernythree/minimal-working-example-mkdocs .","title":"Long-form and detailled documentation"},{"location":"general-guidelines/#wiki-pages-only-for-public-repository","text":"Each GitHub repository includes a section for hosting documentation, known as the wiki. You can use your repository\u2019s wiki to share detailed content about your project, such as usage instructions, design details, or core principles. While a README file provides a quick overview of your project, a wiki allows you to include additional, more comprehensive documentation. \ud83d\udd0d Consult this link for more info on GitHub's Wikis : https://docs.github.com/fr/communities/documenting-your-project-with-wikis/adding-or-editing-wiki-pages","title":"Wiki pages (only for public repository)"},{"location":"general-guidelines/#structure-for-the-repositories","text":"Structure of repositories are flexible but again they should follow several best practices to ensure consistency and readibility. Organize the repository by placing essential files, such as README.md , LICENSE , and CONTRIBUTING.md , at the root for easy access. Create folders like src/ or code/ for source code, docs/ for documentation ... and group other related files into meaningful folders such as data/ , script/ , tools/ , python/ , docker/ , build/ , ... Avoid overly deep or complex hierarchies to keep navigation simple and intuitive. Environment-specific configurations, such as .env or settings.json , should be kept in a dedicated folder, such as config/ . Use .gitignore to prevent sensitive or unnecessary files, like logs or binaries, from being included in the repository.","title":"Structure for the repositories"},{"location":"general-guidelines/#bonus-tips-and-useful-ressources","text":"","title":"(Bonus) Tips and useful ressources"},{"location":"general-guidelines/#tips-for-git","text":"Cloning a git repository to your machine # Replace `owner/repo` with the owner and name of the repository to clone git clone https://github.com/owner/repo.git # change into the `repo` directory cd repo Checking and publishing changes on the main branch # check the sate of your local files against the distant repository git status # make changes to local files # for example, edit `file1.md` and `file2.md` using the text editor # stage the changed files git add file1.md file2.md # take a snapshot of the staging area (anything that's been added) git commit -m \"my commit message\" # push changes to github git push origin main Creating and modifying a new branch # create a new branch to store any new changes git branch my-branch # switch to that branch (line of development) git checkout my-branch # Creating and switching to a branch in one line git checkout -b my-branch # make changes, for example, edit `file1.md` and `file2.md` using the text editor # stage the changed files git add file1.md file2.md # take a snapshot of the staging area (anything that's been added) git commit -m \"my commit message\" # push changes to github git push --set-upstream origin my-branch","title":"Tips for git"},{"location":"general-guidelines/#external-docs-and-useful-links","text":"","title":"External Docs and Useful Links"},{"location":"general-guidelines/#working-with-git","text":"Basis for Git : https://docs.github.com/en/get-started/using-git https://git-scm.com/docs Git with Visual Studio Code : https://code.visualstudio.com/docs/sourcecontrol/intro-to-git","title":"Working with Git"},{"location":"general-guidelines/#working-with-markdown-files","text":"Getting started : https://www.markdownguide.org/getting-started/ Basic syntax : https://www.markdownguide.org/basic-syntax/ Markdown in Python : https://www.honeybadger.io/blog/python-markdown/ https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.to_markdown.html","title":"Working with Markdown files"},{"location":"general-guidelines/#choosing-an-open-source-license","text":"List of commons open-source license : https://choosealicense.com/ https://choosealicense.com/appendix/ The MIT license : https://en.wikipedia.org/wiki/MIT_License The Creative Commons license : https://creativecommons.org/share-your-work/cclicenses/","title":"Choosing an open source license"},{"location":"general-guidelines/#building-your-documentation","text":"Using Mkdocs tool : https://www.mkdocs.org/getting-started/ Using GitHub pages : https://docs.github.com/en/pages/getting-started-with-github-pages","title":"Building your documentation"},{"location":"official-git-repo/","text":"Official GitHub Repositories This page provides access to the official Git repositories for work that have been published or referenced in scientific papers. Categories Software for loggers based on the IOT board Software for loggers based on the FISHNCHIP board CAD files for electronic boards CAD files for 3D-printed casings LoRa networks Dataset Data visualisation Documentation Software for loggers based on the IOT board LoRa logger for sea turtle tracking (version without GPS) A LoRaWAN logger dedicated to sea turtle tracking that transmits real-time data of temperature, surface events and dive profile using the LoRa/LoRaWAN technology. This device has been used within the IOT project for experimentations in Europa, Mayotte, Aldabra and Reunion (2021-2022). https://gitlab.ifremer.fr/sb2-team/iot-tag LoRa logger for sea turtle tracking (version with GPS) (On going ...) LoRa logger for DCP monitoring A LoRaWAN logger dedicated to real-time DCP monitoring. This device has been used for experimentation with the CRPMEM in the Reunion Island (2024). https://gitlab.ifremer.fr/sb2-team/dcp-iotboard-logger LoRa logger to monitor fishes survival rates (TAAF version) A LoRaWAN logger dedicated to monitor survival rates of marine animals after capture and release. The device records underwater temperature and pressure data, then pops after a predifined date and sends the measurement throuhg LoRa while at surface. This device has been used with the TAAF for experiments on sleeper sharks (2024). https://gitlab.ifremer.fr/sb2-team/urelease-logger-taaf Multi-sensor general purpose logger A general purpose logger with no RF communication that read the accelero, the magneto, the temperature, pressure sensors and store the results in the embeded flash memory with compression technique. The configuration is onne through a console user interface, flash dump and quick plots automatized with Python scripts. This device has been used within the TALE project for experimentation on the ship OSIRIS II (2022). https://gitlab.ifremer.fr/sb2-team/iotboard-allinone-logger Software for loggers based on the FISHNCHIP board Multi-sensor GPS LoRa Logger A LoRaWAN GNSS logger based on the FISHNCHIP board that periodically sends GPS position and environmental measurements (pressure, temperature). The device is configured through a console user interface. This device has been used within the LoRaShip project (2023-2024). https://gitlab.ifremer.fr/sb2-team/loraship-fnc-gnss-logger CAD files for electronic boards IOT board (on going...) FISHNCHIP board (v1) (on going...) FISHNCHIP board (v2) (on going...) CAD files for 3D-printed casings Casing for sea turtle tags (on going...) Casing for uRlease tags (on going...) LoRa networks Dataflux agent Lightweight Python agent called Dataflux, which establishes a continuous connection between LoRa servers (TTN, Chirpstack, Orange) and a database (InfluxDB v2) using the MQTT protocol. https://gitlab.ifremer.fr/sb2-team/dataflux-agent Private LoRa server with Chirpstack Sources and executables for a private LoRa network dedicated to natural and remote sites with very limited internet acces. This custom network is composed of a meshed network of secondary gateways that have no internet, a main gateway connected to the internet via satelite and a distant server that emulate a classical LoRa network and bridges with a Chirpstack LoRa server. https://gitlab.ifremer.fr/sb2-team/iot-gateway-layer-chirpstack LoRaShip simulator Python scripts for the simulation and analysis of LoRa network performances in coastal and off-shore marine scenario. https://gitlab.ifremer.fr/sb2-team/loraship-simulator \"Toolbox\" project : https://gitlab.ifremer.fr/sb2-team/loraship-toolbox Dataset A bio-logging dataset on the diving behaviours of juvenile sea turtles from the southwestern Indian Ocean Python scripts to access, process and analyze data produced within the Indian Ocean sea Turtles project (IOT, 2018-2021, Ifremer/CNRS) https://gitlab.ifremer.fr/mj31fbe/iot-data-processing-meepaper2024 A dataset of geolocalized LoRa message in marine conditions (... on going ...) Data visualisation LoRa loggers online-portal (... on going ...) Dashboard with Python / Dash framework Interactive dashboard with Python / Dash framework to visualize logger data (... to be updated ...) Documentation LoRaWAN sensors for wildlife monitoring in off-shore and coastal marine scenario This documentation brings together a range of work on LoRa connectivity in the marine environment, dedicated to the observation of marine fauna, ecosystems and fisheries. https://gitlab.ifremer.fr/sb2-team/lora-sensors-in-marine-scenario-mkdocs GitHub Organization Guidelines (this documentation) This documentation provides guidelines for contributing to this GitHub organization. https://gitlab.ifremer.fr/mj31fbe/github-organization-guidelines-mkdocs","title":"Official GitHub Repositories"},{"location":"official-git-repo/#official-github-repositories","text":"This page provides access to the official Git repositories for work that have been published or referenced in scientific papers. Categories Software for loggers based on the IOT board Software for loggers based on the FISHNCHIP board CAD files for electronic boards CAD files for 3D-printed casings LoRa networks Dataset Data visualisation Documentation","title":"Official GitHub Repositories"},{"location":"official-git-repo/#software-for-loggers-based-on-the-iot-board","text":"","title":"Software for loggers based on the IOT board"},{"location":"official-git-repo/#lora-logger-for-sea-turtle-tracking-version-without-gps","text":"A LoRaWAN logger dedicated to sea turtle tracking that transmits real-time data of temperature, surface events and dive profile using the LoRa/LoRaWAN technology. This device has been used within the IOT project for experimentations in Europa, Mayotte, Aldabra and Reunion (2021-2022). https://gitlab.ifremer.fr/sb2-team/iot-tag","title":"LoRa logger for sea turtle tracking (version without GPS)"},{"location":"official-git-repo/#lora-logger-for-sea-turtle-tracking-version-with-gps","text":"(On going ...)","title":"LoRa logger for sea turtle tracking (version with GPS)"},{"location":"official-git-repo/#lora-logger-for-dcp-monitoring","text":"A LoRaWAN logger dedicated to real-time DCP monitoring. This device has been used for experimentation with the CRPMEM in the Reunion Island (2024). https://gitlab.ifremer.fr/sb2-team/dcp-iotboard-logger","title":"LoRa logger for DCP monitoring"},{"location":"official-git-repo/#lora-logger-to-monitor-fishes-survival-rates-taaf-version","text":"A LoRaWAN logger dedicated to monitor survival rates of marine animals after capture and release. The device records underwater temperature and pressure data, then pops after a predifined date and sends the measurement throuhg LoRa while at surface. This device has been used with the TAAF for experiments on sleeper sharks (2024). https://gitlab.ifremer.fr/sb2-team/urelease-logger-taaf","title":"LoRa logger to monitor fishes survival rates (TAAF version)"},{"location":"official-git-repo/#multi-sensor-general-purpose-logger","text":"A general purpose logger with no RF communication that read the accelero, the magneto, the temperature, pressure sensors and store the results in the embeded flash memory with compression technique. The configuration is onne through a console user interface, flash dump and quick plots automatized with Python scripts. This device has been used within the TALE project for experimentation on the ship OSIRIS II (2022). https://gitlab.ifremer.fr/sb2-team/iotboard-allinone-logger","title":"Multi-sensor general purpose logger"},{"location":"official-git-repo/#software-for-loggers-based-on-the-fishnchip-board","text":"","title":"Software for loggers based on the FISHNCHIP board"},{"location":"official-git-repo/#multi-sensor-gps-lora-logger","text":"A LoRaWAN GNSS logger based on the FISHNCHIP board that periodically sends GPS position and environmental measurements (pressure, temperature). The device is configured through a console user interface. This device has been used within the LoRaShip project (2023-2024). https://gitlab.ifremer.fr/sb2-team/loraship-fnc-gnss-logger","title":"Multi-sensor GPS LoRa Logger"},{"location":"official-git-repo/#cad-files-for-electronic-boards","text":"","title":"CAD files for electronic boards"},{"location":"official-git-repo/#iot-board","text":"(on going...)","title":"IOT board"},{"location":"official-git-repo/#fishnchip-board-v1","text":"(on going...)","title":"FISHNCHIP board (v1)"},{"location":"official-git-repo/#fishnchip-board-v2","text":"(on going...)","title":"FISHNCHIP board (v2)"},{"location":"official-git-repo/#cad-files-for-3d-printed-casings","text":"","title":"CAD files for 3D-printed casings"},{"location":"official-git-repo/#casing-for-sea-turtle-tags","text":"(on going...)","title":"Casing for sea turtle tags"},{"location":"official-git-repo/#casing-for-urlease-tags","text":"(on going...)","title":"Casing for uRlease tags"},{"location":"official-git-repo/#lora-networks","text":"","title":"LoRa networks"},{"location":"official-git-repo/#dataflux-agent","text":"Lightweight Python agent called Dataflux, which establishes a continuous connection between LoRa servers (TTN, Chirpstack, Orange) and a database (InfluxDB v2) using the MQTT protocol. https://gitlab.ifremer.fr/sb2-team/dataflux-agent","title":"Dataflux agent"},{"location":"official-git-repo/#private-lora-server-with-chirpstack","text":"Sources and executables for a private LoRa network dedicated to natural and remote sites with very limited internet acces. This custom network is composed of a meshed network of secondary gateways that have no internet, a main gateway connected to the internet via satelite and a distant server that emulate a classical LoRa network and bridges with a Chirpstack LoRa server. https://gitlab.ifremer.fr/sb2-team/iot-gateway-layer-chirpstack","title":"Private LoRa server with Chirpstack"},{"location":"official-git-repo/#loraship-simulator","text":"Python scripts for the simulation and analysis of LoRa network performances in coastal and off-shore marine scenario. https://gitlab.ifremer.fr/sb2-team/loraship-simulator \"Toolbox\" project : https://gitlab.ifremer.fr/sb2-team/loraship-toolbox","title":"LoRaShip simulator"},{"location":"official-git-repo/#dataset","text":"","title":"Dataset"},{"location":"official-git-repo/#a-bio-logging-dataset-on-the-diving-behaviours-of-juvenile-sea-turtles-from-the-southwestern-indian-ocean","text":"Python scripts to access, process and analyze data produced within the Indian Ocean sea Turtles project (IOT, 2018-2021, Ifremer/CNRS) https://gitlab.ifremer.fr/mj31fbe/iot-data-processing-meepaper2024","title":"A bio-logging dataset on the diving behaviours of juvenile sea turtles from the southwestern Indian Ocean"},{"location":"official-git-repo/#a-dataset-of-geolocalized-lora-message-in-marine-conditions","text":"(... on going ...)","title":"A dataset of geolocalized LoRa message in marine conditions"},{"location":"official-git-repo/#data-visualisation","text":"","title":"Data visualisation"},{"location":"official-git-repo/#lora-loggers-online-portal","text":"(... on going ...)","title":"LoRa loggers online-portal"},{"location":"official-git-repo/#dashboard-with-python-dash-framework","text":"Interactive dashboard with Python / Dash framework to visualize logger data (... to be updated ...)","title":"Dashboard with Python / Dash framework"},{"location":"official-git-repo/#documentation","text":"","title":"Documentation"},{"location":"official-git-repo/#lorawan-sensors-for-wildlife-monitoring-in-off-shore-and-coastal-marine-scenario","text":"This documentation brings together a range of work on LoRa connectivity in the marine environment, dedicated to the observation of marine fauna, ecosystems and fisheries. https://gitlab.ifremer.fr/sb2-team/lora-sensors-in-marine-scenario-mkdocs","title":"LoRaWAN sensors for wildlife monitoring in off-shore and coastal marine scenario"},{"location":"official-git-repo/#github-organization-guidelines-this-documentation","text":"This documentation provides guidelines for contributing to this GitHub organization. https://gitlab.ifremer.fr/mj31fbe/github-organization-guidelines-mkdocs","title":"GitHub Organization Guidelines (this documentation)"},{"location":"team-research/","text":"The Team and Research Activities Our team led by Dr. Serge Bernard and Dr. Sylvain Bonhommeau, brings together technicians, engineers and researchers from LIRMM-CNRS located in Montpellier, France, and Ifremer located in Reunion Island. The team focuses on innovative, open-science research in marine science, ecology, and technology. Our work explores topics such as: Topic 1 Topic 2 Topic 3 ... Scientific publications Below is a list of publications linked to Git projects hosted in our organization Text. Partners Text.","title":"The Team and Research Activities"},{"location":"team-research/#the-team-and-research-activities","text":"Our team led by Dr. Serge Bernard and Dr. Sylvain Bonhommeau, brings together technicians, engineers and researchers from LIRMM-CNRS located in Montpellier, France, and Ifremer located in Reunion Island. The team focuses on innovative, open-science research in marine science, ecology, and technology. Our work explores topics such as: Topic 1 Topic 2 Topic 3 ...","title":"The Team and Research Activities"},{"location":"team-research/#scientific-publications","text":"Below is a list of publications linked to Git projects hosted in our organization Text.","title":"Scientific publications"},{"location":"team-research/#partners","text":"Text.","title":"Partners"}]}